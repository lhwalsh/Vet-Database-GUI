
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Luke Walsh
 */
public class AddAppointment extends javax.swing.JFrame {

    /**
     * Creates new form PopUpAdd
     */
    public AddAppointment() {
        initComponents();
        this.setLocationRelativeTo(null);
    }
    
    public boolean petExists(String petName) throws SQLException {
        boolean exists = false;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/pets?useSSL=false", "root", "root");
            PreparedStatement ps = con.prepareStatement("select pet_name from pets_info;");
            ResultSet rs = ps.executeQuery();
            List<String> results = new ArrayList<String>();
            while(rs.next()) {
                results.add(rs.getString(1));
            }
            for(int i = 0; i < results.size(); i++) {
                if(results.get(i).equals(petName)) {
                    exists = true;
                    i = results.size();
                }
            }
        } 
        catch (ClassNotFoundException ex) {
            Logger.getLogger(AddAppointment.class.getName()).log(Level.SEVERE, null, ex);
        }
        return exists;
    }
    public boolean ownerExists(String ownerName) throws SQLException {
        boolean exists = false;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/pets?useSSL=false", "root", "root");
            PreparedStatement ps = con.prepareStatement("select owner_name from owners;");
            ResultSet rs = ps.executeQuery();
            List<String> results = new ArrayList<String>();
            while(rs.next()) {
                results.add(rs.getString(1));
            }
            for(int i = 0; i < results.size(); i++) {
                if(results.get(i).equals(ownerName)) {
                    exists = true;
                    i = results.size();
                }
            }
        } 
        catch (ClassNotFoundException ex) {
            Logger.getLogger(AddAppointment.class.getName()).log(Level.SEVERE, null, ex);
        }
        return exists;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        NoTextErrorMessage = new javax.swing.JOptionPane();
        ADone = new javax.swing.JButton();
        ACancelAdd = new javax.swing.JButton();
        PetNameTextField = new javax.swing.JTextField();
        DateTextField = new javax.swing.JTextField();
        TimeTextField = new javax.swing.JTextField();
        OwnerTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        NewPetButton = new javax.swing.JButton();
        NewOwnerButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ADone.setText("Done");
        ADone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ADoneActionPerformed(evt);
            }
        });

        ACancelAdd.setText("Cancel");
        ACancelAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ACancelAddActionPerformed(evt);
            }
        });

        PetNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PetNameTextFieldActionPerformed(evt);
            }
        });

        jLabel1.setText("Pet Name:");

        jLabel2.setText("Date (YYYY-MM-DD):");

        jLabel3.setText("Time (00:00:01 to 23:59:59):");

        jLabel4.setText("Owner Name:");

        NewPetButton.setText("New Pet?");
        NewPetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewPetButtonActionPerformed(evt);
            }
        });

        NewOwnerButton.setText("New Owner?");
        NewOwnerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewOwnerButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(ACancelAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ADone, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(OwnerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(TimeTextField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(DateTextField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(PetNameTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NewPetButton)
                    .addComponent(NewOwnerButton))
                .addGap(49, 49, 49))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(PetNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(NewPetButton))
                    .addComponent(jLabel1))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TimeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(OwnerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(NewOwnerButton))
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ACancelAdd)
                    .addComponent(ADone))
                .addGap(74, 74, 74))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PetNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PetNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PetNameTextFieldActionPerformed

    private void NewPetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewPetButtonActionPerformed
        // TODO add your handling code here:
        NewPet pop = new NewPet();
        pop.setVisible(true);
    }//GEN-LAST:event_NewPetButtonActionPerformed

    private void ADoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ADoneActionPerformed
        String[] newAppointment = new String[4];
        newAppointment[0] = PetNameTextField.getText();
        newAppointment[1] = DateTextField.getText();
        newAppointment[2] = TimeTextField.getText();
        newAppointment[3] = OwnerTextField.getText();
        boolean empty = false;
        for (int i = 0; i < 4; i++) {
            if (newAppointment[i].isEmpty()) {
                empty = true;
            }
        }
        if (empty) {
             NoTextErrorMessage.showMessageDialog(ADone, "Please fill out all text fields.");
        } 
        else {
            try {
                String dateTime = newAppointment[1] + " " + newAppointment[2];
                Class.forName("com.mysql.jdbc.Driver");
                Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/pets?useSSL=false", "root", "root");
                if(petExists(newAppointment[0]) && ownerExists(newAppointment[3])) {
                    PreparedStatement ps = con.prepareStatement("insert into appointments(appt_date_time, pet_name, owner_name, status)VALUES('"+dateTime+"', '"+newAppointment[0]+"','"+newAppointment[3]+"', 'outstanding');");
                    ps.executeUpdate();
                }
                else {
                    NoTextErrorMessage.showMessageDialog(ADone, "Please create new pet record first.");
                }
                con.close();
            } catch(ClassNotFoundException e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }
            VetDatabase pop = new VetDatabase();
            pop.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_ADoneActionPerformed

    private void ACancelAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ACancelAddActionPerformed
        // TODO add your handling code here:
        VetDatabase pop = new VetDatabase();
        pop.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_ACancelAddActionPerformed

    private void NewOwnerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewOwnerButtonActionPerformed
        // TODO add your handling code here:
        NewOwner pop = new NewOwner();
        pop.setVisible(true);
    }//GEN-LAST:event_NewOwnerButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddAppointment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ACancelAdd;
    private javax.swing.JButton ADone;
    private javax.swing.JTextField DateTextField;
    private javax.swing.JButton NewOwnerButton;
    private javax.swing.JButton NewPetButton;
    private javax.swing.JOptionPane NoTextErrorMessage;
    private javax.swing.JTextField OwnerTextField;
    private javax.swing.JTextField PetNameTextField;
    private javax.swing.JTextField TimeTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables
}
